#!/bin/bash

alias db='cd ~/src/xplat/'
alias db2='cd ~/src/xplat2/'
alias dbmake='./submodule_update.sh && make project_dbapp && open buck-out/gen/dbapp-ios/Dropbox/Dropbox.xcodeproj'
alias cupmake='./submodule_update.sh && make project_cup && open buck-out/gen/ios/cup/app/Cup.xcodeproj/project.xcworkspace'
alias dbtags='git for-each-ref --shell --sort=creatordate --format="%(refname:short) ->  %(creatordate:format:%x ~ %X %z)" | grep dbapp-ios/'
alias ghd='gh dbx'
alias gpr='gh dbx pr'
alias gprf='gh dbx pr --force-push'
alias ghdm='gh dbx merge --keep-branch --slack-notify'
alias land='gh dbx land --keep-branch --slack-notify'

alias arcpaste='git diff master | arc paste --'
alias mkbuild='arc test xplat_dbapp_ios_and_upload_vm'

alias gen='./ios_gen_module_project -o'
alias td='./td'

function b() {
    BUCK_PATH="$(buck root)"
    MY_PATH="$(pwd)"
    TARGET_PATH="/${MY_PATH#$BUCK_PATH}"
    BUILD_PATH=$TARGET_PATH$1
    echo "$BUILD_PATH"
    buckw build "$BUILD_PATH"
}

function vv() {
    buckw query "attrfilter('module_name', '$1', '//...')" | tail -1
}

PATH=$PATH:~/src/xplat/tools/buck/bin/
PATH=$PATH:~/src/GitChildBranchHelpers/bin/

ssh-add --apple-use-keychain ~/.ssh/id_ed25519_dbx_github > /dev/null 2>&1

# Stacked diffs flow
# run git pull main
# run branch cleanup
# run rebase stacks

alias gpm="git_pull_main"
function git_pull_main() {
    if ! { git diff --cached --exit-code --quiet && git diff --exit-code --quiet; }
    then
        echo "Checkout is dirty!"
        return 1
    fi

    stop_tooling

    git checkout main
    git prune
    git fetch --prune
    git pull --rebase --autostash
    ./td setup --task python3-packages
    ./td sub
    git status
}

alias gbc="git_branch_cleanup"
function git_branch_cleanup() {
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color

    git checkout main

    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/ | egrep -v "(main|jboulter)")
    do
        git diff main $branch --exit-code --quiet
        if [ $? -eq 0 ]
        then
            echo -e "${RED}DELETING $branch${NC}"
            git branch -D $branch
        else
            echo -e "${GREEN}Keeping $branch${NC}"
        fi
    done
    echo "Finished cleaning"
}

alias grs="git_rebase_stacks"
function git_rebase_stacks() {
    RED='\033[0;31m'
    GREEN='\033[0;32m'
    NC='\033[0m' # No Color

    if ! { git diff --cached --exit-code --quiet && git diff --exit-code --quiet; }
    then
        echo "Checkout is dirty!"
        return 1
    fi

    git checkout main

    # Nasty, but the intent here is to loop the branches in "tree order" - I want to rebase branches further up the tree first
    # so that any stacked branches will rebase their upstream branches at the same time
    BRANCHES_STRING=$(git log --pretty="format:%D" --graph --branches -10000 | perl -ne 'for (split /[\s,]+/) { print $_ . "\n" if /^[a-z0-9\_]+$/ && !/main/}')

    read -d '' -A BRANCHES <<< "$BRANCHES_STRING"

    echo $BRANCHES
    
    #for branch in $(git for-each-ref --format='%(refname:short)'  --sort='-committerdate' refs/heads/ | egrep -v '^(main|jboulter)')

    for branch in $BRANCHES
    do
        echo -e "${GREEN}*** ${branch}${NC}"
        git checkout $branch
        if [ $? -ne 0 ]
        then
            echo -e "${RED}Skipping ${branch}, cannot checkout${NC}"
        else
            /opt/homebrew/bin/git rebase main --update-refs # -X theirs
            if [ $? -ne 0 ]
            then
                echo -e "${RED}Could not rebase ${branch}, please fix and finish rebase, then re-run.${NC}"
                break
            fi
        fi
    done

    git checkout main
}

function stop_tooling() {
    echo "Killing watchman"
    killall watchman || true

    if [ -f ".buckconfig" ]
    then
        echo "Killing buck"
        buck kill
    fi

    rm -rf .buckconfig.d/.watchman-cookie-*

    if pgrep -qf MacOS/Xcode
    then
        echo "Killing xcode"
        killall -9 Xcode || true
        sleep 2
    fi

    if pgrep -qf MacOS/Xcode
    then
        echo "Killing xcode"
        killall -9 Xcode || true
        sleep 2
    fi
}
